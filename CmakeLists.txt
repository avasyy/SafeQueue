cmake_minimum_required(VERSION 3.15)

project(SafeQueueLib VERSION 1.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 1. Static library with explicit instantiations
add_library(SafeQueueStatic STATIC safequeue_inst.cpp)
target_include_directories(SafeQueueStatic PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)

# 2. Shared (dynamic) library with explicit instantiations
add_library(SafeQueueShared SHARED safequeue_inst.cpp)
target_include_directories(SafeQueueShared PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)

# ==================================
# INSTALL RULES
# ==================================

include(CMakePackageConfigHelpers)

# Install headers
install(DIRECTORY include/ DESTINATION include)

# Install only static lib (shared is optional)
install(TARGETS
    SafeQueueStatic
    EXPORT SafeQueueLibTargets
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin
)

# Export target definitions
install(EXPORT SafeQueueLibTargets
    FILE SafeQueueLibTargets.cmake
    NAMESPACE SafeQueue::
    DESTINATION lib/cmake/SafeQueueLib
)

# Generate and install Config + Version files
configure_package_config_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/SafeQueueLibConfig.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/SafeQueueLibConfig.cmake
    INSTALL_DESTINATION lib/cmake/SafeQueueLib
)

write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/SafeQueueLibConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/SafeQueueLibConfig.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/SafeQueueLibConfigVersion.cmake
    DESTINATION lib/cmake/SafeQueueLib
)
